datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                       Int           @id @default(autoincrement())
  username                 String        @unique
  password                 String
  email                    String        @unique
  emailConfirmed           Boolean       @default(false)
  confirmationToken        String?       // Token for email confirmation
  confirmationTokenExpiry  DateTime?     // Expiry for the confirmation token
  resetToken               String?       // Token for password setting/reset
  resetTokenExpiry         DateTime?     // Expiry for the token
  userRoles                UserRole[]    // Association with roles (global and client-specific)
  userGroups               UserGroup[]   // Association with groups
  experiences              Experience[]  @relation("UserExperiences")
  rewards                  UserReward[]
  nfts                     NFT[]
  clients                  Client[]      @relation("UserClients")
  createdAt                DateTime      @default(now())
}

model Role {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String?
  userRoles   UserRole[]
  groupRoles  GroupRole[]
}

model UserRole {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    Int
  client    Client?  @relation(fields: [clientId], references: [id])
  clientId  Int?
  createdAt DateTime @default(now())

  @@unique([userId, roleId, clientId])
}

model Group {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  description String?
  users      UserGroup[]
  groupRoles GroupRole[]
  createdAt  DateTime    @default(now())
}

model UserGroup {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   Int
  createdAt DateTime @default(now())

  @@unique([userId, groupId])
}

model GroupRole {
  id        Int      @id @default(autoincrement())
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   Int
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    Int
  client    Client?  @relation(fields: [clientId], references: [id])
  clientId  Int?
  createdAt DateTime @default(now())

  @@unique([groupId, roleId, clientId])
}

model Client {
  id            Int          @id @default(autoincrement())
  name          String       @unique
  owner         User?        @relation("UserClients", fields: [ownerId], references: [id])
  ownerId       Int?
  plan          String
  parentId      Int?
  parent        Client?      @relation("SubClients", fields: [parentId], references: [id])
  subClients    Client[]     @relation("SubClients")
  userRoles     UserRole[]
  groupRoles    GroupRole[]
  experiences   Experience[]
  createdAt     DateTime     @default(now())
}

model Experience {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  createdBy   User         @relation("UserExperiences", fields: [createdById], references: [id])
  createdById Int
  client      Client       @relation(fields: [clientId], references: [id])
  clientId    Int
  rewards     Reward[]
  createdAt   DateTime     @default(now())
}

model Reward {
  id            Int          @id @default(autoincrement())
  name          String
  description   String?
  experience    Experience   @relation(fields: [experienceId], references: [id])
  experienceId  Int
  users         UserReward[]
  createdAt     DateTime     @default(now())
}

model NFT {
  id        Int       @id @default(autoincrement())
  tokenId   String    @unique
  owner     User      @relation(fields: [ownerId], references: [id])
  ownerId   Int
  metadata  Json
  createdAt DateTime  @default(now())
}

model UserReward {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  reward    Reward    @relation(fields: [rewardId], references: [id])
  rewardId  Int
  createdAt DateTime  @default(now())
}
